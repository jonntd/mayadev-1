proc createVDBNode_vis_volume()
{
//------------create OpenVDBVisualize------------------
    string $OpenVDBRead = `createNode  OpenVDBRead`;
    connectAttr time1.outTime ($OpenVDBRead +".time"); 
    
    string $OpenVDBVis = `createNode -n OpenVDBVisualizeShape OpenVDBVisualize` ;
    
    connectAttr ( $OpenVDBRead + ".VdbOutput") ( $OpenVDBVis +".VDBInput");
    
    //----------create ArnoldVolumeShape  ---------
        
    string $ArnVolumeSh = `createNode -n ArnoldVolumeShape aiVolume`;
    setAttr ($ArnVolumeSh+".type") 1;
    
    //-------------connect OpenVDBBisualize and ArnoldVolumeShape-----
    string $transformVDB[] = `listRelatives -p $OpenVDBVis`;
    string $_attr = `addAttr -at message  -sn arnoldVolume OpenVDBVisualize`;
    string $transformArn[] = `listRelatives -p $ArnVolumeSh`;
    
    connectAttr ( $transformArn[0] + ".message") ( $transformVDB[0] + ".arnoldVolume");
    
    //--------create ArnoldShader and connect------------------
    
    string $shadingEngine = `createNode -n aiStandard1SG shadingEngine`;
    string $_material = `createNode -n aiStandard1 aiStandard`;
    string $_volumeMat = `createNode -n aiVolumeCollector aiVolumeCollector`;
    connectAttr ( $_material + ".outColor")  ($shadingEngine + ".surfaceShader");
    connectAttr ( $_volumeMat + ".outColor")  ($shadingEngine + ".volumeShader");
    select -r $transformArn[0];
    sets -e -forceElement $shadingEngine;

}

proc createVDBNode_vis_volume_arnold_ramp()
{
//------------create OpenVDBVisualize------------------
    string $OpenVDBRead = `createNode  OpenVDBRead`;
    connectAttr time1.outTime ($OpenVDBRead +".time"); 
    string $OpenVDBVis = `createNode -n OpenVDBVisualizeShape OpenVDBVisualize` ;
    connectAttr ( $OpenVDBRead + ".VdbOutput") ( $OpenVDBVis +".VDBInput");

    setAttr ($OpenVDBVis+".LeafNodes") 0;
    setAttr ($OpenVDBVis+".ActiveTiles") 0;
    setAttr ($OpenVDBVis+".Surface") 1;
    setAttr ($OpenVDBVis+".Isovalue") 0.001;
    
    //----------create ArnoldVolumeShape  ---------
        
    string $openVdbNode = `OpenVdbNodeCreate`;
    string $openVdbShape[] = `listRelatives -s -f $openVdbNode`;
       
    //-------------connect OpenVDBBisualize and ArnoldVolumeShape-----
    string $transformVDB[] = `listRelatives -p -f $OpenVDBVis`;
//    string $_attr = `addAttr -at message  -sn openVdbNode $transformVDB[0]`;
    connectAttr ($OpenVDBRead+".VdbFilePath")  ($openVdbShape[0]+".volumePath");


    parent $transformVDB[0] $openVdbNode;
}     


    

proc createVDBNode_vis_volume_arnold_volumeNode_Update() 
{    
//-------------------------------------------------------
    string $sels[] = `ls -sl`;
    string $arnoldVolumeShapes[] =`listRelatives -s $sels[0]`;
    //---------------------------------------------------------
    select -r $sels[0];
    string $childNodes[] = `listRelatives -ad -c -type OpenVDBVisualize $sels[0]`;
    
    if ( `size $childNodes` != 0)
    {
        string $OpenVDBVis =  $childNodes[0];
        string $tmps[] = `listConnections -s 1 -type OpenVDBRead $OpenVDBVis`;
        string $OpenVDBRead  = $tmps[0];

        string $filename = `getAttr ( $arnoldVolumeShapes[0] + ".filename")`;
        $filename = `substitute ("####") ($filename) ("$F4")`;
        setAttr -type "string" ( $OpenVDBRead + ".VdbFilePath") $filename;  
        
                 
    }
    else
    {
        string $OpenVDBRead = `createNode  OpenVDBRead`;
        //connectAttr time1.outTime ($OpenVDBRead +".time"); 
        connectAttr ( $arnoldVolumeShapes[0] + ".frame") ( $OpenVDBRead + ".time");
        string $OpenVDBVis = `createNode -n OpenVDBVisualizeShape OpenVDBVisualize` ;
        connectAttr ( $OpenVDBRead + ".VdbOutput") ( $OpenVDBVis +".VDBInput");
    
        setAttr ($OpenVDBVis+".LeafNodes") 0;
        setAttr ($OpenVDBVis+".ActiveTiles") 0;
        setAttr ($OpenVDBVis+".Surface") 1;
        setAttr ($OpenVDBVis+".Isovalue") 0.001;    
        
        parent $OpenVDBVis $sels[0];
        
        //------------------------------------------------
        string $filename = `getAttr ( $arnoldVolumeShapes[0] + ".filename")`;
        $filename = `substitute ("####") ($filename) ("$F4")`;
        setAttr -type "string" ( $OpenVDBRead + ".VdbFilePath") $filename;
        
        string $attr = $OpenVDBVis + ".VdbAllGridNames" ;
        string $selectedGrid = `optionMenu -q -value vdbGridNameMenu`;
        string $selectionAttr = plugNode($attr) + ".VdbSelectedGridNames"; 
        setAttr -type "string" $selectionAttr $selectedGrid;        
    }
}   


proc windowUI( string $win ) {
	string $window = `window -w 800 -h 400 
		-title "copyConnect_AnimCurve" $win `; 
	string $form = `formLayout -numberOfDivisions 100`;
//		string $frameLayout = `frameLayout -label "copy_anim_curve" -labelAlign "center" -borderStyle "in"  ` ;
//			string $columnLayout = `columnLayout -adjustableColumn true -columnAttach "both" `;
			string $buttonLayout = `button -label "copy createVDBNode_vis_volume" `;
			string $buttonLayout1 = `button -label "createVDBNode_vis_volume_arnold_ramp" `;
			string $buttonLayout2 = `button -label "createVDBNode_vis_volume_arnold_volumeNode_Update" `;
			setParent ..;
//		setParent ..;

//	setParent ..;
	button -e -c ( "createVDBNode_vis_volume" ) $buttonLayout ;
	button -e -c ( "createVDBNode_vis_volume_arnold_ramp" ) $buttonLayout1 ;
	button -e -c ( "createVDBNode_vis_volume_arnold_volumeNode_Update" ) $buttonLayout2 ;
 	formLayout -edit
 		-attachForm     $buttonLayout     "top"    5
 		-attachForm     $buttonLayout     "left"   5
 		-attachPosition  $buttonLayout     "bottom" 5 40
 		-attachPosition $buttonLayout    "right"  5 100
 	
		-attachControl  $buttonLayout1	 "top" 5 $buttonLayout
 		-attachForm     $buttonLayout1     "left"   5
 		-attachForm     $buttonLayout1     "bottom" 80
 		-attachForm     $buttonLayout1    "right"  5

		-attachControl  $buttonLayout2	 "top" 5 $buttonLayout1
 		-attachForm     $buttonLayout2     "left"   5
 		-attachForm     $buttonLayout2     "bottom" 5
 		-attachForm     $buttonLayout2    "right"  5
	$form;

	showWindow $window;
}


proc arnold_Volume_Node_create() 
{
	string $win = "arnold Volume Node create";
	if ( `window -exists $win` ) deleteUI -window $win ;
	
	windowUI ( $win ) ;
}

arnold_Volume_Node_create ;