import sgBFunction_dag
import sgBFunction_fileAndPath
import cPickle

trs = cmds.ls( tr=1 )

sels = []
for tr in trs:
    if tr[-4:] == ':SET':
        print tr
        sels.append( tr )

scenePath = cmds.file( q=1, sceneName=1 )
sceneFolder = '/'.join( scenePath.split( '/' )[:-1] )
posFolder = sceneFolder + '/posData'


def getChildrenCurveAndLocatorExists( topNodes ):
    
    sels = cmds.ls( topNodes )
    
    trNodes = []
    for sel in sels:
        trNodes.append( getTransform( sel ) )
    
    if not trNodes: return []

    selH = cmds.listRelatives( trNodes, c=1, ad=1, f=1, type='transform' )
    if not selH: selH = []
    selH += trNodes
    
    targets = []
    for sel in selH:
        selShape = getShape( sel )
        if not selShape: continue
        if not cmds.nodeType( selShape ) in ['nurbsCurve','locator']: continue
        targets.append( sel )
    targets = list( set( targets ) )
    
    return targets


for sel in sels:
    ns = sel.split( '|' )[-1].split( ':' )[0]
    
    filePath = posFolder + '/' + ns.replace( ':', '_' )
    
    curves = sgBFunction_dag.getChildrenCurveAndLocatorExists( sel )
    
    sgBFunction_fileAndPath.makeFile( filePath, False )
    ctlsAndData = []

    for curve in curves:
        ctlName = curve.split( ':' )[-1]
        curveKeys = cmds.listAttr( curve, k=1 )
        curveValues = []
        if not curveKeys: continue
        for curveKey in curveKeys:
            curveValues.append( cmds.getAttr( curve + '.' + curveKey ) )
        
        ctlsAndData.append( [ctlName, curveKeys, curveValues] )
    f = open( filePath, 'w' )
    cPickle.dump( ctlsAndData, f )
    f.close()