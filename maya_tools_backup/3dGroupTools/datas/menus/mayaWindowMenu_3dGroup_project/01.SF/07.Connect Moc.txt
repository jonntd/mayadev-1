import chModules.ctls.allCtlsCmd
inst = chModules.ctls.allCtlsCmd.World_CTL()

allMoc = ''
worldCtl = ''

trs = cmds.ls( tr=1 )
for tr in trs:
    if tr[-7:] == 'All_Moc':
        allMoc = tr
    if tr[-9:] == 'World_CTL':
        worldCtl = tr

inst.connectMocapJoint( allMoc, worldCtl )

import maya.cmds as cmds

sels = cmds.ls( tr=1 )

for sel in sels:
    
    if sel[-11:] != 'Root_MOCPiv': continue
    
    mmdc = cmds.listConnections( sel+'.wm' )
    if not mmdc: continue
    mmdc = mmdc[0]
    
    jo = cmds.getAttr( sel+'.jo' )[0]
    child = cmds.createNode( 'transform' )
    cmds.parent( child, sel )
    cmds.setAttr( child+'.t', 0,0,0 )
    cmds.setAttr( child+'.r', 0,0,0 )
    cmds.setAttr( child+'.s', 1,1,1 )
    
    composeMtx = cmds.createNode( 'composeMatrix' )
    invMtx     = cmds.createNode( 'inverseMatrix' )
    dcmp       = cmds.createNode( 'decomposeMatrix' )
    cmds.connectAttr( sel+'.jo', composeMtx+'.ir' )
    cmds.connectAttr( composeMtx+'.outputMatrix', invMtx + '.inputMatrix' )
    cmds.connectAttr( invMtx+'.outputMatrix', dcmp+'.imat' )
    cmds.connectAttr( dcmp+'.or', child+'.r' )
    
    cmds.connectAttr( child+'.wm', mmdc+'.i[0]', f=1 )

otherMoc = cmds.spaceLocator()[0]

cmds.connectAttr( allMoc+'.t', otherMoc+'.t' )
cmds.connectAttr( allMoc+'.s', otherMoc+'.s' )

mmdcCons = cmds.listConnections( allMoc+'.wim', d=1, type='multMatrixDecompose', p=1, c=1 )

for i in range( 0, len( mmdcCons ), 2 ):
    outCon = mmdcCons[i]
    inputCon = mmdcCons[i+1]
    
    cmds.connectAttr( outCon.replace( allMoc, otherMoc ), inputCon, f=1 )

cmds.setAttr( allMoc+'.s', 1,1,1 )