def setModelAsAlembicModel( rootModel ):

    import sgBFunction_dag
    import sgBFunction_attribute

    folderPath = 'D:/project_2015/cm_04/coc/cache'
    rootModel = cmds.ls( rootModel, l=1 )[0].split( '|' )[1]
    outMeshs = []
    for mesh in cmds.listRelatives( rootModel, c=1, ad=1, type='transform' ):
        meshShape = sgBFunction_dag.getShape( mesh )
        if not meshShape:continue
        if cmds.nodeType( meshShape ) != 'mesh': continue
        
        outMeshs.append( meshShape )

        srcCon = cmds.listConnections( meshShape+'.inMesh' )
        if not srcCon: cmds.error( "%s has no source connection" % mesh )
        if cmds.nodeType( srcCon[0] ) == 'AlembicNode':
            print srcCon[0]
            cmds.warning( "%s aleady has alembic" % mesh )
            return None

    ns = rootModel.split( ':' )[0]
    rootCtl = ns + ':superROOT'
    
    filePath = ( folderPath + '/' + ns + '.abc' ).replace( '\\', '/' )
    for abcNode in cmds.ls( type='AlembicNode' ):
        cuFilePath = cmds.getAttr( abcNode+'.abc_File' ).replace( '\\', '/' )
        if filePath == cuFilePath: cmds.delete( abcNode )
    
    currentFrame = cmds.currentTime( q=1 )
    cmds.setKeyframe( rootCtl+'.tx' )
    cmds.currentTime( currentFrame + 1 )
    cmds.setAttr( rootCtl+'.tx', cmds.getAttr( rootCtl+'.tx' ) + 0.001 )
    cmds.setKeyframe( rootCtl+'.tx' )
    cmds.currentTime( currentFrame )
    
    cmds.AbcExport( j="-frameRange %s %s -step 1 -dataFormat ogawa -writeVisibility -eulerFilter -root %s -file %s" %( currentFrame, currentFrame+1, rootModel, filePath ) )
    
    abcNode = cmds.createNode( 'AlembicNode' )
    cmds.setAttr( abcNode+'.abc_File', filePath, type='string' )
    
    index = 0
    inMeshs = []
    for mesh in cmds.listRelatives( rootModel, c=1, ad=1, type='transform' ):
        meshShape = sgBFunction_dag.getShape( mesh )
        if not meshShape:continue
        if cmds.nodeType( meshShape ) != 'mesh': continue

        inMeshs.append( meshShape )

        srcCon = cmds.listConnections( meshShape+'.inMesh', p=1 )
        if not srcCon: cmds.warning( "%s has no input" % mesh )
        if not cmds.isConnected( abcNode+'.outPolyMesh[%d]' % index, meshShape+'.inMesh' ):
            cmds.connectAttr( abcNode+'.outPolyMesh[%d]' % index, meshShape+'.inMesh', f=1 )
        index += 1


sels = cmds.ls( sl=1 )

for sel in sels:
    print sel
    setModelAsAlembicModel( sel )
    cmds.refresh()