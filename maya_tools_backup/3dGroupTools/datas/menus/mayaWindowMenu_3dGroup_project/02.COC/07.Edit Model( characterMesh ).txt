import sgBFunction_dag


def setModelAsAlembicModel( rootModel, baseModel, folderPath ):

    import sgBFunction_dag
    import sgBFunction_attribute

    rootModel = cmds.ls( rootModel, l=1 )[0].split( '|' )[1]
    for mesh in cmds.listRelatives( rootModel, c=1, ad=1, type='transform' ):
        meshShape = sgBFunction_dag.getShape( mesh )
        if not meshShape:continue
        if cmds.nodeType( meshShape ) != 'mesh': continue

        srcCon = cmds.listConnections( meshShape+'.inMesh' )
        if not srcCon: cmds.error( "%s has no source connection" % mesh )
        if cmds.nodeType( srcCon[0] ) == 'AlembicNode':
            cmds.warning( "%s aleady has alembic" % mesh )
            return None

    baseNs = baseModel.split( ':' )[0]
    ns     = rootModel.split( ':' )[0]
    rootCtl = baseNs + ':superROOT'
    
    filePath = ( folderPath + '/' + ns + '.abc' ).replace( '\\', '/' )
    for abcNode in cmds.ls( type='AlembicNode' ):
        cuFilePath = cmds.getAttr( abcNode+'.abc_File' ).replace( '\\', '/' )
        if filePath == cuFilePath: cmds.delete( abcNode )
    
    currentFrame = cmds.currentTime( q=1 )
    cmds.setKeyframe( rootCtl+'.tx' )
    cmds.currentTime( currentFrame + 1 )
    cmds.setAttr( rootCtl+'.tx', cmds.getAttr( rootCtl+'.tx' ) + 0.001 )
    cmds.setKeyframe( rootCtl+'.tx' )
    cmds.currentTime( currentFrame )
    
    cmds.AbcExport( j="-frameRange %s %s -step 1 -dataFormat ogawa -writeVisibility -eulerFilter -root %s -file %s" %( currentFrame, currentFrame+1, rootModel, filePath ) )
    
    abcNode = cmds.createNode( 'AlembicNode' )
    cmds.setAttr( abcNode+'.abc_File', filePath, type='string' )
    
    index = 0
    for mesh in cmds.listRelatives( rootModel, c=1, ad=1, type='transform' ):
        meshShape = sgBFunction_dag.getShape( mesh )
        if not meshShape:continue
        if cmds.nodeType( meshShape ) != 'mesh': continue

        srcCon = cmds.listConnections( meshShape+'.inMesh', p=1 )
        if not srcCon: cmds.warning( "%s has no input" % mesh )
        if not cmds.isConnected( abcNode+'.outPolyMesh[%d]' % index, meshShape+'.inMesh' ):
            cmds.connectAttr( abcNode+'.outPolyMesh[%d]' % index, meshShape+'.inMesh', f=1 )
        index += 1


def getCtlPosition( base, target ):
    
    base   = cmds.ls( base, l=1 )[0].split( '|' )[1]
    target = cmds.ls( target, l=1 )[0].split( '|' )[1]

    baseNS = base.split( ':' )[0]
    targetNS = target.split( ':' )[0]
    
    targetInfos = cmds.listRelatives( target, c=1, ad=1, f=1, type='transform' )
    
    for targetInfo in targetInfos:
        targetInfoName = targetInfo.split( '|' )[-1]
        baseCtlName = targetInfoName.replace( targetNS, baseNS ).replace( '_ctlInfo', '' )
        
        if not cmds.nodeType( baseCtlName ) in [ 'joint', 'transform' ] : continue
        
        targetInfoAttrs = cmds.listAttr( targetInfo, k=1 )
        if not targetInfoAttrs: continue
        for attr in targetInfoAttrs:
            try:
                value = cmds.getAttr( targetInfoName + '.' + attr )
                cmds.setAttr( baseCtlName + '.' + attr, value )
            except:pass



def setCtlPosition( base, target ):
    
    print base, target
    
    base   = cmds.ls( base, l=1 )[0].split( '|' )[1]
    target = cmds.ls( target, l=1 )[0].split( '|' )[1]

    baseNS = base.split( ':' )[0]
    targetNS = target.split( ':' )[0]
    
    targetInfos = cmds.listRelatives( target, c=1, ad=1, f=1, type='transform' )
    
    for targetInfo in targetInfos:
        targetInfoName = targetInfo.split( '|' )[-1]
        baseCtlName = targetInfoName.replace( targetNS, baseNS ).replace( '_ctlInfo', '' )
        
        if not cmds.nodeType( baseCtlName ) in [ 'joint', 'transform' ] : continue
        
        targetInfoAttrs = cmds.listAttr( targetInfo, k=1 )
        if not targetInfoAttrs: continue
        for attr in targetInfoAttrs:
            try:
                value = cmds.getAttr( baseCtlName + '.' + attr )
                cmds.setAttr( targetInfoName + '.' + attr, value )
            except:pass



def getConnectedMesh( base ):
    
    baseModelChildren = cmds.listRelatives( base, c=1, ad=1, f=1, type='mesh' )
    
    targetMeshs = []
    for i in range( len( baseModelChildren ) ):
        cons = cmds.listConnections( baseModelChildren[i]+'.outMesh', d=1, s=0 )
        if not cons: continue
        targetMeshs += cons
    if not targetMeshs: return None
    return cmds.ls( targetMeshs[0], l=1 )[0].split( '|' )[1]



def getModel( target, base ):

    import sgBFunction_dag

    targetNs = target.split( ':' )[0]
    baseNs   = base.split( ':' )[0]
    
    rootModelChildren = cmds.listRelatives( target, c=1, ad=1, f=1, type='transform' )
    
    for i in range( len( rootModelChildren ) ):
        shape = sgBFunction_dag.getShape( rootModelChildren[i] )
        if not shape: continue
        shapeName = shape.split( '|' )[-1]
        if not shape: continue
        if cmds.nodeType( shape ) != 'mesh': continue
        baseMesh = baseNs  + shapeName[ len( targetNs ) :]
        if not cmds.isConnected( baseMesh+'.outMesh', shape+'.inMesh' ):
            cmds.connectAttr( baseMesh+'.outMesh', shape+'.inMesh', f=1 )


def getController( model ):
    
    folderpath = 'D:/project_2015/cm_04/coc/cache'
    import sgBFunction_fileAndPath
    sgBFunction_fileAndPath.makeFolder( folderpath )
    
    rootModel = cmds.ls( model, l=1 )[0].split( '|' )[1]
    
    ns, rootName = rootModel.split( ':' )
    
    digitArea = 0
    for i in range( len( ns ) ):
        if ns[ len( ns )-1-i ].isdigit():
            digitArea += 1
    
    if not digitArea:
        chName = ns
    else:
        chName = ns[ :-digitArea ]
    
    baseModel = chName + '_base:' + rootName
    baseSet   = chName + '_base:' + 'SET'
    targetSet = ns + ':' + 'SET_ctlInfo'
    
    connectedMesh = getConnectedMesh( baseModel )
    if connectedMesh:
        connectedSet  = connectedMesh.split( ':' )[0] + ':SET_ctlInfo'
        setCtlPosition( baseSet, connectedSet )
    
    if connectedMesh: setModelAsAlembicModel( connectedMesh, baseModel, folderpath )
    getCtlPosition( baseSet, targetSet )
    getModel( rootModel, baseModel )
    

sels = cmds.ls( sl=1 )

getController( sels[0] )