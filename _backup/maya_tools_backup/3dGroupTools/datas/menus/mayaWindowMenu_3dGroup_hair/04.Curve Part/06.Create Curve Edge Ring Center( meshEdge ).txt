import maya.OpenMaya as om

def getOrderedEdgeRings( targetEdge ):
    cmds.select( targetEdge )
    cmds.SelectEdgeRingSp()
    ringEdges = cmds.ls( sl=1, fl=1 )
    connectedEdges = []
    
    for edge in ringEdges:
        vertices = cmds.ls( cmds.polyListComponentConversion( edge, tv=1 ), fl=1 )
        edges = cmds.ls( cmds.polyListComponentConversion( vertices, te=1 ), fl=1 )
        secondVertices = cmds.ls( cmds.polyListComponentConversion( edges, tv=1 ), fl=1 )
        
        for vertex in vertices:
            secondVertices.remove( vertex )
        
        lastEdges = []
        existEdges = []
        for secondVertex in secondVertices:
            getEdges = cmds.ls( cmds.polyListComponentConversion( secondVertex, te=1 ), fl=1 )
            for edge in getEdges:
                if edge in lastEdges: existEdges.append( edge )
                else: lastEdges.append( edge )
        connectedEdges.append( existEdges )
    
    for i in range( len( ringEdges ) ):
        if len( connectedEdges[i] ) == 1:
            break
    
    nextIndex = ringEdges.index( connectedEdges[i][0] )
    orderedEdges = [ ringEdges[i], ringEdges[ nextIndex ] ]
    
    startNum = 0
    while len( connectedEdges[ nextIndex ]  )== 2:
        edges = connectedEdges[ nextIndex ]
        exists = False
        for edge in edges:
            if not edge in orderedEdges:
                orderedEdges.append( edge )
                exists = True
                break
        if not exists: break
        nextIndex = ringEdges.index( edge )
        startNum += 1
    
    return orderedEdges

orderedEdges = getOrderedEdgeRings( cmds.ls( sl=1 ) )

selList = om.MSelectionList()
om.MGlobal.getActiveSelectionList( selList )

oComponent = om.MObject()
dagPath    = om.MDagPath()

selList.getDagPath( 0, dagPath )

fnMesh = om.MFnMesh( dagPath )
pointsVertices = om.MPointArray()
fnMesh.getPoints( pointsVertices )
meshMatrix = dagPath.inclusiveMatrix()

pointList = om.MPointArray()
pointList.setLength( len( orderedEdges ) )

for i in range( len( orderedEdges ) ):
    index = int( orderedEdges[i].split( '[' )[-1].replace( ']', '' ) )
    util = om.MScriptUtil()
    util.createFromList( [0,0], 2 )
    ptr = util.asInt2Ptr()
    fnMesh.getEdgeVertices( index, ptr )
    firstIndex = util.getInt2ArrayItem( ptr, 0, 0 )
    secondIndex = util.getInt2ArrayItem( ptr, 0, 1 )
    
    firstPoint =  pointsVertices[firstIndex]
    secondPoint = pointsVertices[secondIndex]
    
    centerPoint = (om.MVector(firstPoint) + om.MVector( secondPoint ))/2
    centerPoint*= meshMatrix
    pointList.set( i, centerPoint.x, centerPoint.y, centerPoint.z )

fnNurbsCurve = om.MFnNurbsCurve()
trCurve = cmds.createNode( 'transform' )
oTrCurve = om.MObject()
selListForTr = om.MSelectionList()
selListForTr.add( trCurve )
selListForTr.getDependNode( 0, oTrCurve )

fnNurbsCurve.createWithEditPoints( pointList, 3, 1, 0, 0, 0, oTrCurve )

cmds.rename( trCurve, fnMesh.name() + '_curve' )