import maya.cmds as cmds
import maya.mel as mel
from functools import partial
import sgBFunction_ui
import cPickle
import sgBFunction_fileAndPath


class sgPC_WinA_Global:
    
    winName = 'sgPatternCurve'
    title   = 'Pattern Curve'
    width   = 310
    height  = 140

    ff_patternSize = ''
    ff_offsetMult  = ''


class sgPC_WinA_Cmd:
    
    @staticmethod
    def cmdCreatePatternBase( arg=0 ):
        
        mel.eval( 'curve -d 3 -p -3 1.997458 3.211458 -p -1.081006 1.997458 3.211458 -p -1.081006 0 2.439085 -p -0.942148 0 0 -p -2.245595 0 -2.140972 -p -1.538354 1.939039 -3.015416 -p -0.0294241 1.939039 -3.015416 -p 1.879282 1.997458 -3.058236 -p 2.245595 0 -2.140972 -p 0.942148 0 0 -p 1.081006 0 2.439085 -p 1.081006 1.997458 3.211458 -p 3 1.997458 3.211458 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 10 -k 10;' )

    
    @staticmethod
    def cmdCreatePattern( arg=0 ):
        
        import sgBFunction_dag
        import sgBFunction_attribute
        
        PatternSize = cmds.floatField( sgPC_WinA_Global.ff_patternSize, q=1, v=1 )
        OffsetMult  = cmds.floatField( sgPC_WinA_Global.ff_offsetMult, q=1, v=1 )
        
        sels = cmds.ls( sl=1 )
        
        curve = sels[0]
        surf  = sels[1]
        
        curveShape = sgBFunction_dag.getShape( curve )
        surfShape =  sgBFunction_dag.getShape( surf )
        
        numSpansU = cmds.getAttr( surfShape + '.spansU' )
        numSpansV = cmds.getAttr( surfShape + '.spansV' )
        
        rebuildSurf = cmds.createNode( 'rebuildSurface' )
        cmds.setAttr( rebuildSurf + '.keepCorners', 0 )
        cmds.setAttr( rebuildSurf + '.spansU', numSpansU )
        cmds.setAttr( rebuildSurf + '.spansV', numSpansV )
        
        trGeo = cmds.createNode( 'transformGeometry' )
        node = cmds.createNode( 'sgPatternCurveOnSurface' )
        
        sgBFunction_attribute.addAttr( curve, ln='patternSize', min=0.1, dv=PatternSize, k=1 )
        sgBFunction_attribute.addAttr( curve, ln='offsetMult',  min=0.25, dv=OffsetMult, k=1  )
        sgBFunction_attribute.addAttr( curve, ln='widthMult',  min=0.95, max=2, dv=1, k=1  )
        
        cmds.connectAttr( curve + '.patternSize', node + '.patternSize' )
        cmds.connectAttr( curve + '.offsetMult' , node + '.offsetMult' )
        cmds.connectAttr( curve + '.widthMult' ,  node + '.widthMult' )
        
        newSurface = cmds.createNode( 'nurbsSurface' )
        cmds.setAttr( newSurface + '.io', 1 )
        
        cmds.connectAttr( surfShape + '.local', rebuildSurf + '.inputSurface' )
        cmds.connectAttr( rebuildSurf + '.outputSurface', trGeo + '.inputGeometry' )
        cmds.connectAttr( surf + '.wm', trGeo + '.transform' )
        cmds.connectAttr( trGeo + '.outputGeometry', newSurface+'.create' )
        cmds.connectAttr( newSurface + '.local', node + '.surface' )
        cmds.connectAttr( curveShape + '.local', node + '.curve' )
        
        surfShape = cmds.listRelatives( curve, s=1, f=1 )[0]
        nodes = cmds.listConnections( surfShape, s=0, d=1, type='sgPatternCurveOnSurface' )
        
        outputNum = cmds.getAttr( nodes[0] + '.numOutput' )
        
        for i in range( outputNum ):
            cons = cmds.listConnections( nodes[0] +'.outputCurves[%d]' % i )
            if not cons:
                outputCurve = cmds.createNode( 'nurbsCurve' )
                cmds.connectAttr( nodes[0] + '.outputCurves[%d]' % i, outputCurve + '.create' )
    
    @staticmethod
    def cmdUpdatePattern( arg=0 ):
        
        sels = cmds.ls( sl=1 )

        surfShape = cmds.listRelatives( sels[0], s=1, f=1 )[0]
        nodes = cmds.listConnections( surfShape, s=0, d=1, type='sgPatternCurveOnSurface' )
        
        node = nodes[0]
        
        hists = cmds.listHistory( node )
        
        delTarget = ''
        targetSurface = ''
        for hist in hists:
            if cmds.nodeType( hist ) != 'nurbsSurface': continue
            if cmds.getAttr( hist + '.io' ): 
                delTarget = cmds.listRelatives( hist, p=1, f=1 )[0]
            else:
                targetSurface = cmds.listRelatives( hist, p=1, f=1 )[0]
        
        curves = cmds.listConnections( node+'.outputCurves' )
        
        cmds.delete( curves, delTarget )
        
        import sgBFunction_dag
        import sgBFunction_attribute
        
        curve = sels[0]
        surf  = targetSurface
        
        curveShape = sgBFunction_dag.getShape( curve )
        surfShape =  sgBFunction_dag.getShape( surf )
        
        numSpansU = cmds.getAttr( surfShape + '.spansU' )
        numSpansV = cmds.getAttr( surfShape + '.spansV' )
        
        rebuildSurf = cmds.createNode( 'rebuildSurface' )
        cmds.setAttr( rebuildSurf + '.keepCorners', 0 )
        cmds.setAttr( rebuildSurf + '.spansU', numSpansU )
        cmds.setAttr( rebuildSurf + '.spansV', numSpansV )
        
        trGeo = cmds.createNode( 'transformGeometry' )
        node = cmds.createNode( 'sgPatternCurveOnSurface' )
        
        cmds.connectAttr( curve + '.patternSize', node + '.patternSize' )
        cmds.connectAttr( curve + '.offsetMult' , node + '.offsetMult' )
        
        newSurface = cmds.createNode( 'nurbsSurface' )
        cmds.setAttr( newSurface + '.io', 1 )
        
        cmds.connectAttr( surfShape + '.local', rebuildSurf + '.inputSurface' )
        cmds.connectAttr( rebuildSurf + '.outputSurface', trGeo + '.inputGeometry' )
        cmds.connectAttr( surf + '.wm', trGeo + '.transform' )
        cmds.connectAttr( trGeo + '.outputGeometry', newSurface+'.create' )
        cmds.connectAttr( newSurface + '.local', node + '.surface' )
        cmds.connectAttr( curveShape + '.local', node + '.curve' )
        
        surfShape = cmds.listRelatives( curve, s=1, f=1 )[0]
        nodes = cmds.listConnections( surfShape, s=0, d=1, type='sgPatternCurveOnSurface' )
        
        outputNum = cmds.getAttr( nodes[0] + '.numOutput' )
        
        for i in range( outputNum ):
            cons = cmds.listConnections( nodes[0] +'.outputCurves[%d]' % i )
            if not cons:
                outputCurve = cmds.createNode( 'nurbsCurve' )
                cmds.connectAttr( nodes[0] + '.outputCurves[%d]' % i, outputCurve + '.create' )
        



class sgPC_WinA:

    
    def __init__(self):
        
        self.winName = sgPC_WinA_Global.winName
        self.title   = sgPC_WinA_Global.title
        self.width   = sgPC_WinA_Global.width
        self.height  = sgPC_WinA_Global.height
        


    def create(self):
        
        if cmds.window( self.winName, ex=1 ):
            cmds.deleteUI( self.winName, wnd=1 )
        cmds.window( self.winName, title=self.title )

        cmds.columnLayout()
        
        cmds.rowColumnLayout( nc=1, cw=(1,305))
        cmds.text( l='', h=5  )
        cmds.button( l='Create Pattern Base', h=28, c= sgPC_WinA_Cmd.cmdCreatePatternBase )
        cmds.text( l='', h=5  )
        cmds.setParent( '..' )
        
        cmds.rowColumnLayout( nc=4, cw=[(1,100), (2,50), (3,100), (4,50)])
        cmds.text( l='  Pattern Size : ' )
        sgPC_WinA_Global.ff_patternSize = cmds.floatField( v=0.5, min=0.1 )
        cmds.text( l='  Offset Mult : ' )
        sgPC_WinA_Global.ff_offsetMult = cmds.floatField( v=0.64, min=0.25 )
        cmds.setParent( '..' )
        
        cmds.rowColumnLayout( nc=1, cw=(1,305))
        cmds.text( l='', h=10  )
        cmds.button( l='Create Pattern( pattern base, surface )', h=28, c= sgPC_WinA_Cmd.cmdCreatePattern )
        cmds.text( l='', h=2  )
        cmds.setParent( '..' )
        
        cmds.rowColumnLayout( nc=1, cw=(1,305))
        cmds.button( l='Update Pattern( pattern base )', h=28, c= sgPC_WinA_Cmd.cmdUpdatePattern )
        cmds.text( l='', h=5  )
        cmds.setParent( '..' )
        
        cmds.window( self.winName, e=1, wh=[ sgPC_WinA_Global.width, sgPC_WinA_Global.height ])
        cmds.showWindow( self.winName )


sgPC_WinA().create()