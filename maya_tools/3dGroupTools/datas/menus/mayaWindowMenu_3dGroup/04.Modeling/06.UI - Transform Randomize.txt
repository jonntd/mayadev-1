
import maya.cmds as mc
from collections import OrderedDict
import random
from functools import partial

def transF_randomInput( u_MinMax_List, u_Check_List, u_Lock_List,*args):
    print "run"
    
    transMM_Value = [mc.floatFieldGrp( u_MinMax_List[0], query = True, value1 = True), mc.floatFieldGrp( u_MinMax_List[0], query = True, value2 = True)]
    rotMM_Value = [mc.floatFieldGrp( u_MinMax_List[1], query = True, value1 = True), mc.floatFieldGrp( u_MinMax_List[1], query = True, value2 = True)]
    scaMM_Value = [mc.floatFieldGrp(u_MinMax_List[2], query = True, value1 = True), mc.floatFieldGrp( u_MinMax_List[2], query = True, value2 = True)]

   
    transCH_Value = mc.checkBox( u_Check_List[0] , query = True, value = True ), mc.checkBox(u_Check_List[1] , query = True, value = True ), mc.checkBox( u_Check_List[2] , query = True, value = True )
    rotCH_Value = mc.checkBox( u_Check_List[3] , query = True, value = True ), mc.checkBox( u_Check_List[4] , query = True, value = True ), mc.checkBox( u_Check_List[5] , query = True, value = True )
    scaCH_Value = mc.checkBox( u_Check_List[6] , query = True, value = True ), mc.checkBox( u_Check_List[7] , query = True, value = True ), mc.checkBox( u_Check_List[8] , query = True, value = True )
      
    randLK_Value = [ mc.checkBox( u_Lock_List[0] , query = True, value = True ), mc.checkBox( u_Lock_List[1] , query = True, value = True ), mc.checkBox( u_Lock_List[2] , query = True, value = True )]
    
     
    print transMM_Value, transCH_Value
    print rotMM_Value, rotCH_Value
    print scaMM_Value, scaCH_Value
    
    sl_ls = mc.ls( sl = True, l = True )

    transF_ls = []
    for node in sl_ls :
        if "transform" != mc.objectType(node) :
            t_node = mc.listRelatives(node, p = True,fullPath = True)[0]
            
            if "transform" == mc.objectType( t_node ) :
                transF_ls.append( t_node )   
        else :
            transF_ls.append( node )    
    
    transF_ls= list( OrderedDict.fromkeys( transF_ls ) )
    
    for node in transF_ls :
        print node
        
        if randLK_Value[0] :
            rv_Temp = random.uniform( transMM_Value[0], transMM_Value[1] ) 
            if transCH_Value[0] :
                mc.setAttr( node+".translateX", rv_Temp )
            if transCH_Value[1] :
                mc.setAttr( node+".translateY", rv_Temp )
            if transCH_Value[2] :
                mc.setAttr( node+".translateZ", rv_Temp )
        else :
            if transCH_Value[0] :
                rv_Temp = random.uniform( transMM_Value[0], transMM_Value[1] )  
                mc.setAttr( node+".translateX", rv_Temp )
            if transCH_Value[1] :
                rv_Temp = random.uniform( transMM_Value[0], transMM_Value[1] )
                mc.setAttr( node+".translateY", rv_Temp )
            if transCH_Value[2] :
                rv_Temp = random.uniform( transMM_Value[0], transMM_Value[1] )
                mc.setAttr( node+".translateZ", rv_Temp )
        
        if randLK_Value[1] :
            rv_Temp = random.uniform( rotMM_Value[0], rotMM_Value[1] )
            if rotCH_Value[0] :
                mc.setAttr( node+".rotateX", rv_Temp )
            
            if rotCH_Value[1] :
                mc.setAttr( node+".rotateY", rv_Temp )
            
            if rotCH_Value[2] :
                mc.setAttr( node+".rotateZ", rv_Temp )  
        else :
            if rotCH_Value[0] :
                rv_Temp = random.uniform( rotMM_Value[0], rotMM_Value[1] )
                mc.setAttr( node+".rotateX", rv_Temp )
            
            if rotCH_Value[1] :
                rv_Temp = random.uniform( rotMM_Value[0], rotMM_Value[1] )
                mc.setAttr( node+".rotateY", rv_Temp )
            
            if rotCH_Value[2] :
                rv_Temp = random.uniform( rotMM_Value[0], rotMM_Value[1] )
                mc.setAttr( node+".rotateZ", rv_Temp )


        if randLK_Value[2] :
            rv_Temp = random.uniform( scaMM_Value[0], scaMM_Value[1] )
            if scaCH_Value[0] :
                mc.setAttr( node+".scaleX", rv_Temp )
            
            if scaCH_Value[1] :
                mc.setAttr( node+".scaleY", rv_Temp )
            
            if scaCH_Value[2] :
                mc.setAttr( node+".scaleZ", rv_Temp )
                
        else :
            if scaCH_Value[0] :
                rv_Temp = random.uniform( scaMM_Value[0], scaMM_Value[1] )
                mc.setAttr( node+".scaleX", rv_Temp )
            
            if scaCH_Value[1] :
                rv_Temp = random.uniform( rotMM_Value[0], scaMM_Value[1] )
                mc.setAttr( node+".scaleY", rv_Temp )
            
            if scaCH_Value[2] :
                rv_Temp = random.uniform( rotMM_Value[0], scaMM_Value[1] )
                mc.setAttr( node+".scaleZ", rv_Temp )
            
def transF_randomReset ( u_MinMax_List, u_Check_List, u_Lock_List ,*args ):

    for i in u_MinMax_List:
        mc.floatFieldGrp( i, edit = True, value1 = 0.000) 
        mc.floatFieldGrp( i, edit = True, value2 = 0.000)
    mc.floatFieldGrp( u_MinMax_List[2], edit = True, value1 = 1.0), mc.floatFieldGrp( u_MinMax_List[2], edit = True, value2 = 1.0)
    for i in u_Check_List:
        mc.checkBox( i, edit = True, value = False )
        
    for i in u_Lock_List:
        mc.checkBox( i, edit = True, value = False )
    
def transF_randomWin():
    if mc.window("randT_Win", q=True, exists=True):
        mc.deleteUI("randT_Win")       
    transF_Win = mc.window( "randT_Win", title = "Transform Randomize v1.0 by hojunlfe", width = 410, s = 0)
    main_lay = mc.columnLayout( rs = 0)
    
    tran_fra = mc.frameLayout( label = "Translate", labelVisible = 1,  borderStyle='etchedIn', width = 410, height = 130,  p = main_lay)
    rot_fra = mc.frameLayout( label = "Rotate", labelVisible = 1,  borderStyle='etchedIn', width = 410, height = 130, p = main_lay )
    sca_fra = mc.frameLayout( label = "Scale", labelVisible = 1,  borderStyle='etchedIn', width = 410, height = 130, p = main_lay )
    run_fra = mc.frameLayout( labelVisible = 0,  borderStyle='etchedOut', width = 410, height = 50, p = main_lay )
    #mc.text( label = "", fn = "boldLabelFont", width = 410, height = 15, bgc = [0.2, 0.2, 0.2], p = main_lay)
    
    trans_col = mc.columnLayout( rs = 5, p = tran_fra )
    rot_col = mc.columnLayout( rs = 5, p = rot_fra )
    sca_col = mc.columnLayout( rs = 5, p = sca_fra )
    
    #
    mc.text( l = "",  p = trans_col )
    trans_row1 = mc.rowLayout( nc = 2,  p = trans_col )
    trans_row2 = mc.rowColumnLayout( nc = 5,  p = trans_col )
    trans_row3 = mc.rowColumnLayout( nc = 3,  p = trans_col )
    mc.text( l = "",  p = trans_col )
    
    
    u_tranMinMax = mc.floatFieldGrp( numberOfFields=2, label='min / max', pre = 3, value1 = 0.000, value2 = 0.000,p = trans_row1)
    mc.text( l = "                                            ", p =  trans_row2)
    u_trans_X = mc.checkBox( l = " x        ", p =  trans_row2 )
    u_trans_Y = mc.checkBox( l = " y        ", p =  trans_row2 )
    u_trans_Z = mc.checkBox( l = " z        ", p =  trans_row2 )
    
    mc.text( l = "                                                        ", p =  trans_row3)
    u_trans_lock = mc.checkBox( l = "Random Lock", p =  trans_row3 )
    
    #
    mc.text( l = "", p = rot_col )
    rot_row1 = mc.rowLayout( nc = 2,  p = rot_col )
    rot_row2 = mc.rowColumnLayout( nc = 5,  p = rot_col )
    rot_row3 = mc.rowColumnLayout( nc = 3,  p = rot_col )
    
    u_rotMinMax = mc.floatFieldGrp( numberOfFields=2, label='min / max', pre = 3, value1 = 0.000, value2 = 0.000 , p = rot_row1)
    mc.text( l = "                                            ", p =  rot_row2)
    u_rot_X = mc.checkBox( l = " x        ", p =  rot_row2 )
    u_rot_Y = mc.checkBox( l = " y        ", p =  rot_row2 )
    u_rot_Z = mc.checkBox( l = " z        ", p =  rot_row2 )
    
    mc.text( l = "                                                        ", p =  rot_row3)
    u_rot_lock = mc.checkBox( l = "Random Lock", p =  rot_row3 )
    
    #
    mc.text( l = "", p = sca_col )
    sca_row1 = mc.rowLayout( nc = 2,  p = sca_col )
    sca_row2 = mc.rowColumnLayout( nc = 5,  p = sca_col )
    sca_row3 = mc.rowColumnLayout( nc = 3,  p = sca_col )
    
    u_scaMinMax = mc.floatFieldGrp( numberOfFields=2, label='min / max', pre = 3 ,value1 = 1.000, value2 = 1.000, p = sca_row1  )
    mc.text( l = "                                                ", p =  sca_row2)
    u_sca_X = mc.checkBox( l = " x        ", p =  sca_row2 )
    u_sca_Y = mc.checkBox( l = " y        ", p =  sca_row2 )
    u_sca_Z = mc.checkBox( l = " z        ", p =  sca_row2 )
    
    
    mc.text( l = "                                                        ", p =  sca_row3)
    u_sca_lock = mc.checkBox( l = "Random Lock", p =  sca_row3 )
    
    
    u_MinMax_List = [u_tranMinMax, u_rotMinMax , u_scaMinMax]
    u_Check_List = [
                u_trans_X 
                , u_trans_Y
                , u_trans_Z
                , u_rot_X 
                , u_rot_Y
                , u_rot_Z
                , u_sca_X 
                , u_sca_Y
                , u_sca_Z
    ]
    
    u_Lock_List = [ u_trans_lock, u_rot_lock, u_sca_lock]
    
    transF_randomInput_cmd = partial( transF_randomInput, u_MinMax_List, u_Check_List, u_Lock_List )
    transF_randomReset_cmd = partial( transF_randomReset, u_MinMax_List, u_Check_List, u_Lock_List )
    
            
    run_col = mc.rowLayout( nc = 2, p = run_fra )
    mc.button( l = "Apply", p = run_col, width = 202, height = 45, c = transF_randomInput_cmd )
    mc.button( l = "Reset", p = run_col, width = 202, height = 45, c = transF_randomReset_cmd )
    
    mc.showWindow(transF_Win)

transF_randomWin()
