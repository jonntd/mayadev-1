import sgBFunction_dag
import sgBFunction_base
import sgBFunction_fileAndPath
import sgBFunction_connection

sgBFunction_base.autoLoadPlugin( 'gpuCache' )

sels = sgBFunction_dag.getChildrenShapeExists( cmds.ls( sl=1 ) )

sceneName = cmds.file( q=1, sceneName=1 )
sceneFileName = sceneName.split( '/' )[-1].split( '.' )[0]

for sel in sels:
    
    selName = sel.split( '|' )[-1]
    print selName
    
    folderName = '/'.join( sceneName.split( '/' )[:-1] ) + '/%s_gpuCache' % sceneFileName
    sgBFunction_fileAndPath.makeFolder( folderName )
    
    try:cmds.gpuCache( sel, startTime = 1, endTime=1, optimize=1, writeMaterials=1, optimizationThreshold = 40000, dataFormat='ogawa', directory= folderName, fileName = selName+'_gpu' )
    except: continue
    
    fileName = folderName + '/' + selName+'_gpu.abc'
    
    fileEx = False
    for cache in cmds.ls( type='gpuCache' ):
        cuFilePath = cmds.getAttr( cache+'.cacheFileName' )
        if cuFilePath == fileName: 
            cmds.delete( cache )
    
    gpuObjName = selName+'_gpu'
    gpuCacheNode = cmds.createNode( 'gpuCache' )
    gpuCacheObj = cmds.listRelatives( gpuCacheNode, p=1, f=1 )[0]
    gpuCacheObj = cmds.rename( gpuCacheObj, gpuObjName )
    gpuShapeName = cmds.listRelatives( gpuObjName, c=1,f=1 )[0]
    cmds.setAttr( gpuShapeName+'.cacheFileName', fileName, type='string' )
    
    selP = cmds.listRelatives( sel, p=1, f=1 )
    if selP:
        cmds.parent( gpuObjName, selP[0] )
    
    pos = cmds.getAttr( sel+'.wm' )
    cmds.xform( gpuObjName, ws=1, matrix=pos )
    cmds.setAttr( gpuObjName+'.v', cmds.getAttr( sel+'.v' ) )
    sgBFunction_connection.getSourceConnection( sel, gpuObjName )
    
    try:cmds.setAttr( sel+'.v', 0 )
    except:pass