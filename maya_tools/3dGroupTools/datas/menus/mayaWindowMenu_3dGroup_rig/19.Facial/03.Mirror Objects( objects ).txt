import sgBFunction_value

sels = cmds.ls( sl=1 )

facialMirrorGrp = 'FacialMirrorObjectGrp'
if not cmds.objExists( facialMirrorGrp ):
    cmds.createNode( 'transform', n=facialMirrorGrp )
    cmds.setAttr( facialMirrorGrp+'.sx', -1 )

for sel in sels:
    
    selName = sel.split( '|' )[-1]
    otherSideName = sgBFunction_value.getOtherSideString( selName )
    
    selP = cmds.listRelatives( sel, p=1, f=1 )[0]
    otherP = cmds.duplicate( selP, n=sgBFunction_value.getOtherSideString( selP ) )[0]
    
    otherChildren = cmds.listRelatives( otherP, c=1, f=1 )
    
    other = ''
    for child in otherChildren:
        childName = child.split( '|' )[-1]
        if childName != selName: 
            cmds.delete( child )
            continue
        other = cmds.rename( child, sgBFunction_value.getOtherSideString( childName ) )
    
    cmds.connectAttr( selP+'.t', otherP+'.t' )
    cmds.connectAttr( selP+'.r', otherP+'.r' )
    cmds.connectAttr( selP+'.s', otherP+'.s' )
    
    otherPGrp = cmds.group( em=1 )
    otherP = cmds.parent( otherP, otherPGrp )[0]
    cmds.setAttr( otherPGrp+'.sx', -1 )
    cmds.parent( otherP, facialMirrorGrp )
    cmds.delete( otherPGrp )