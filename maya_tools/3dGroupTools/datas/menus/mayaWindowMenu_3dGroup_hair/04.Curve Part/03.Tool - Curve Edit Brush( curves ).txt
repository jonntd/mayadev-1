import sgBFunction_base
import maya.cmds as cmds
import maya.mel as mel
sgBFunction_base.autoLoadPlugin( 'sgTools' )

melScript = '''
proc int isGreasePencilContext()
//
//	Description:
//		Returns true if this is Grease Pencil context.
//
{
	string $tc = currentToolClass();
	return ($tc == "greasePencil");
}


global proc artActivateScreenSlider(
	string $sliderName
)
//
//	Description:
//		Global procs for activating screen sliders
//		- sets the flag to activate them.
//
{
	// New Artisan Tools.
	if ( isArtisanCtx() ) {
		string $artisanCmd = artisanCommand();
		if( $sliderName == "upper_radius" ) {
			artBaseCtx -e -dragSlider "radius" `currentCtx`;
		} else if( $sliderName == "lower_radius" ) {
			artBaseCtx -e -dragSlider "lowradius" `currentCtx`;
		} else if( $sliderName == "opacity" ) {
			artBaseCtx -e -dragSlider "opacity" `currentCtx`;
		} else if( $sliderName == "value" ) {
			artBaseCtx -e -dragSlider "value" `currentCtx`;
		} else if( $sliderName == "stamp_depth" ) {
			artBaseCtx -e -dragSlider "depth" `currentCtx`;
		} else if( $sliderName == "displacement" ) {
			artBaseCtx -e -dragSlider "displacement" `currentCtx`;
		} else if( $sliderName == "uv_vector" ) {
			artBaseCtx -e -dragSlider "uvvector" `currentCtx`;
		}
	}
	else if ( isGreasePencilContext() )
	{
		if( $sliderName == "upper_radius" )
		{
			// Map B to radius
			artBaseCtx -e -dragSlider "radius" greasePencilContext;
		}
		else if( $sliderName == "displacement" )
		{
			// Map m to opacity rather than value but not for the eraser
			// as this has no effect
			if ( 4 != `greasePencilCtx -query -greasePencilType greasePencilContext` )
			{
				artBaseCtx -e -dragSlider "opacity" greasePencilContext;
			}
		}
	}
	// UV Smudge Tool
	else if ( isSmudgeCtx() ) {
		texSmudgeUVContext -edit -dragSlider "radius" texSmudgeUVCtx;
	}
	// Soft Mod
	else if ( size( getActiveSoftMod() ) > 0 )
	{
		string $ctx = `currentCtx`;
		if( `contextInfo -c $ctx` != "softMod" )
			$ctx = "softModContext";
		softModCtx -e -dragSlider "radius" $ctx;
	}
	// Paint Effects.
	else if ((`isTrue "MayaCreatorExists"`) && isDynPaint())
	{
		if( $sliderName == "displacement" ) {
			dynPaintResize("offset");
		} else if( $sliderName == "lower_radius" ) {
			dynPaintResize("width");
		} else {
			dynPaintResize("size");
		}
	}
	else if ($sliderName == "upper_radius")
	{
		// upper_radius is the "b" key by default.  We only want to use that one
		// for soft select.  The "n" and "m" keys can also come in here so we want
		// to filter those out.
		global string $gSoftSelectOptionsCtx;
		softSelectOptionsCtx -edit -buttonDown $gSoftSelectOptionsCtx;
		if( `currentCtx` == "sgCurveEditBrushContext1" )
		{
		    sgCurveEditBrushContext -e -radiusEditOn 1 sgCurveEditBrushContext1;
		}
	}
}

global proc artDeactivateScreenSlider()
//
//	Description:
//		Global procs for deactivating screen sliders - sets the flag to
//		deactivate them.
//
{
	// New Artisan Tools.
	if ( isArtisanCtx() ) {
		artBaseCtx -e -dragSlider "none" `currentCtx`;
	}
	else if ( isGreasePencilContext() )
	{
		artBaseCtx -e -dragSlider "none" greasePencilContext;
	}
	// UV Smudge
	else if ( isSmudgeCtx() ) {
		texSmudgeUVContext -e -dragSlider "none" texSmudgeUVCtx;
	}
	// Soft Mod
	else if ( size( getActiveSoftMod() ) > 0 )
	{
		string $ctx = `currentCtx`;
		if( `contextInfo -c $ctx` != "softMod" )
			$ctx = "softModContext";
		softModCtx -e -dragSlider "none" $ctx;
	}
	// Paint Effects.
    else if (`isTrue "MayaCreatorExists"` && isDynPaint())
	{
		dynPaintResize("none");
	}
	else
	{
		// We filter out the "n" and "m" keys in the activate call
		// but don't here because there isn't a slider name passed
		// in for deactivate.  To soft select context is smart
		// enough to know that it didn't start and edit so we are
		// ok to just call this in case we did.
		global string $gSoftSelectOptionsCtx;
		softSelectOptionsCtx -edit -buttonUp $gSoftSelectOptionsCtx;
	}
	if( `currentCtx` == "sgCurveEditBrushContext1" )
	{
	    sgCurveEditBrushContext -e -radiusEditOn 0 sgCurveEditBrushContext1;
	}
}

global proc sgCurveEditBrush_contextProperties()
{
}

global proc sgCurveEditBrush_contextValues( string $context )
{
}
'''

mel.eval( melScript )

import sgBFunction_dag
sels = sgBFunction_dag.getChildrenCurveExists( cmds.ls( sl=1 ) )
cmds.select( sels )

if not cmds.contextInfo( "sgCurveEditBrushContext1", ex=1 ):
    mel.eval( 'sgCurveEditBrushContext sgCurveEditBrushContext1' )
cmds.setToolTo( "sgCurveEditBrushContext1" )