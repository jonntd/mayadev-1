// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//****************************************************************************
//	Maintain the mental ray camera attributes on camera nodes.
//****************************************************************************

global proc AEmentalrayCameraFlagsCreate(string $messagePlug)
{
	warning(
	"Calling an obsolete mel procedure AEmentalrayCameraFlagsCreate.");	
}

global proc AEmrCameraShadersNew(
	string $envShader,
	string $volumeShader,
	string $lensShader)
{
	attrNavigationControlGrp -label "Environment Shader" envShaderCtrl;
	attrNavigationControlGrp -label "Volume Shader" volumeShaderCtrl;
	attrNavigationControlGrp -label "Lens Shader" lensShaderCtrl;

	AEmrCameraShadersReplace($envShader, $volumeShader, $lensShader);
}

global proc AEmrCameraShadersReplace(
	string $envShader,
	string $volumeShader,
	string $lensShader)
{
	string $node;
	string $buffer[];
	tokenize($lensShader, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";


	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $volumeShader volumeShaderCtrl;
	popupMenu -pmc ("popupItems " + $volumeShader + " pop_mr_cam_vol") -p volumeShaderCtrl pop_mr_cam_vol;
	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $lensShader lensShaderCtrl;
	popupMenu -pmc ("popupItems " + $lensShader + " pop_mr_cam_len") -p lensShaderCtrl pop_mr_cam_len;
	attrNavigationControlGrp
		-edit  -dgc drag_ya -dpc drop_ya -attribute $envShader envShaderCtrl;
	popupMenu -pmc ("popupItems " + $envShader + " pop_mr_cam_env") -p envShaderCtrl pop_mr_cam_env;
}

global proc AEmrCameraOutputUpdate(string $node)
{
	int $hasOutputShader =
		`connectionInfo -isDestination ($node + ".miOutputShader")`;
	int $colorEnabled =
		`getAttr ($node + ".miFbComputeColor")` && $hasOutputShader;
	int $alphaEnabled =
		`getAttr ($node + ".miFbComputeAlpha")` && $hasOutputShader;

	rowColumnLayout -edit -enable $hasOutputShader
		FBLayout;
	radioButtonGrp -edit -enable $colorEnabled
		colorFBRadioCtrl;
	radioButtonGrp -edit -enable $alphaEnabled
		alphaFBRadioCtrl;
}

global proc AEmrCameraOutputNew(string $outputShader)
{
	attrNavigationControlGrp -label "Output Shader" outputShaderCtrl;

	rowColumnLayout -nc 2
		-columnWidth 1 160 -columnWidth 2 250
		FBLayout;

		text -l "Framebuffers" -align "right";
		text -l "";

		checkBoxGrp
			-label "Color" -numberOfCheckBoxes 1 -label1 ""
			colorFBToggleCtrl;
		radioButtonGrp
			-l "" -numberOfRadioButtons 4
			-labelArray4 "byte" "short" "half" "float"
			-data1 0 -data2 1 -data3 2 -data4 3
			-columnWidth5 1 60 60 60 60
			colorFBRadioCtrl;

		checkBoxGrp
			-label "Alpha" -numberOfCheckBoxes 1 -label1 ""
			alphaFBToggleCtrl;
		radioButtonGrp
			-l "" -numberOfRadioButtons 4
			-labelArray4 "byte" "short" "half" "float"
			-data1 0 -data2 1 -data3 2 -data4 3
			-columnWidth5 1 60 60 60 60
			alphaFBRadioCtrl;

		checkBoxGrp
			-label "Depth"
			-numberOfCheckBoxes 1 -label1 ""
			depthFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Normals"
			-numberOfCheckBoxes 1 -label1 ""
			normalFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Motion Vectors"
			-numberOfCheckBoxes 1 -label1 ""
			motionFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Coverage"
			-numberOfCheckBoxes 1 -label1 ""
			coverageFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Tag"
			-numberOfCheckBoxes 1 -label1 ""
			tagFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Contour"
			-numberOfCheckBoxes 1 -label1 ""
			contourFBToggleCtrl;
		text -label "";
	setParent ..;

	AEmrCameraOutputReplace($outputShader);
}

global proc AEmrCameraOutputReplace(string $outputShader)
{
	string $node;
	string $buffer[];
	tokenize($outputShader, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";

	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $outputShader outputShaderCtrl;
	popupMenu -pmc ("popupItems " + $outputShader + " pop_mr_cam_out") -p outputShaderCtrl pop_mr_cam_out;

		
	scriptJob
		-parent outputShaderCtrl -replacePrevious
		-connectionChange $outputShader
		("AEmrCameraOutputUpdate " + $node);

	connectControl -index 2 colorFBToggleCtrl
		($node + ".miFbComputeColor");
	checkBoxGrp
		-edit -changeCommand ("AEmrCameraOutputUpdate " + $node)
		colorFBToggleCtrl;

	connectControl colorFBRadioCtrl
		($node + ".miFbBitsizeColor");

	connectControl -index 2 alphaFBToggleCtrl
		($node + ".miFbComputeAlpha");
	checkBoxGrp
		-edit -changeCommand ("AEmrCameraOutputUpdate " + $node)
		alphaFBToggleCtrl;

	connectControl alphaFBRadioCtrl
		($node + ".miFbBitsizeAlpha");

	connectControl -index 2 depthFBToggleCtrl
		($node + ".miFbComputeDepth");
	connectControl -index 2 normalFBToggleCtrl
		($node + ".miFbComputeNormal");
	connectControl -index 2 motionFBToggleCtrl
		($node + ".miFbComputeMotion");
	connectControl -index 2 coverageFBToggleCtrl
		($node + ".miFbComputeCoverage");
	connectControl -index 2 tagFBToggleCtrl
		($node + ".miFbComputeTag");
	connectControl -index 2 contourFBToggleCtrl
		($node + ".miFbComputeContour");

	AEmrCameraOutputUpdate($node);
}

global proc AEmentalrayCamera(string $node)
{
	editorTemplate -beginLayout "mental ray" -collapse true;
		editorTemplate -callCustom
			"AEmrCameraShadersNew"
			"AEmrCameraShadersReplace"
				"miEnvironmentShader"
				"miVolumeShader"
				"miLensShader";
		editorTemplate -bl "Lens Shaders";
			AEconnectionTableTemplate
				"miLensShaderList";
		editorTemplate -el;
//		editorTemplate -bl "Render Passes";
//			AEmentalrayRenderPasses
//				"miRenderPassList";
//		editorTemplate -el;
		editorTemplate -bl "Output Passes";
			editorTemplate -ccu
				"AEmrCameraOutputNew"
				"AEmrCameraOutputReplace"
					"miOutputShader";
		editorTemplate -bl "Output Passes";
			AEmentalrayOutputPasses
				"miOutputShaderList";
		editorTemplate -el;
		editorTemplate -el;
	editorTemplate -endLayout;

	editorTemplate -suppress "miOutputShader";
	editorTemplate -suppress "miFbComputeColor";
	editorTemplate -suppress "miFbBitsizeColor";
	editorTemplate -suppress "miFbComputeAlpha";
	editorTemplate -suppress "miFbBitsizeAlpha";
	editorTemplate -suppress "miFbComputeDepth";
	editorTemplate -suppress "miFbComputeNormal";
	editorTemplate -suppress "miFbComputeMotion";
	editorTemplate -suppress "miFbComputeCoverage";
	editorTemplate -suppress "miFbComputeTag";
	editorTemplate -suppress "miFbComputeContour";
	editorTemplate -suppress "miVolumeShader";
	editorTemplate -suppress "miLensShader";
	editorTemplate -suppress "miEnvironmentShader";
	editorTemplate -suppress "miOutputShaderList";
	editorTemplate -suppress "miLensShaderList";
	editorTemplate -suppress "mentalRayControls";
}
