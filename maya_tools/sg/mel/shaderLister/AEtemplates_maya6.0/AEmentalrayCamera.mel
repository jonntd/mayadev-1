// Copyright (C) 1997-2004 Alias,
// a division of Silicon Graphics Limited.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//****************************************************************************
//	Maintain the mental ray camera attributes on camera nodes.
//****************************************************************************

global proc AEmentalrayCameraFlagsCreate(string $messagePlug)
{
	warning("Calling an obsolete mel procedure AEmentalrayCameraFlagsCreate.");	
}

global proc AEmentalrayCameraFlagsUpdate(string $node)
{
	int $hasOutputShader =
		`connectionInfo -isDestination ($node + ".miOutputShader")`;
	int $colorEnabled =
		`getAttr ($node + ".miFbComputeColor")` && $hasOutputShader;
	int $alphaEnabled =
		`getAttr ($node + ".miFbComputeAlpha")` && $hasOutputShader;

	rowColumnLayout -edit -enable $hasOutputShader
		FBLayout;
	radioButtonGrp -edit -enable $colorEnabled
		colorFBRadioCtrl;
	radioButtonGrp -edit -enable $alphaEnabled
		alphaFBRadioCtrl;
}

global proc AEmentalrayCameraFlagsNew(
	string $messagePlug,
	string $outputShader,
	string $volumeShader,
	string $lensShader,
	string $environmentShader)
{
	setUITemplate
		-pushTemplate attributeEditorTemplate;

	attrNavigationControlGrp -label "Output Shader" outputShaderCtrl;
	
	rowColumnLayout
		-numberOfColumns 2 -columnWidth 1 175 -columnWidth 2 200
		FBLayout;

		text -l "Framebuffers:";
		text -l "";

		checkBoxGrp
			-label "Color" -numberOfCheckBoxes 1 -label1 ""
			colorFBToggleCtrl;
		radioButtonGrp
			-l "" -numberOfRadioButtons 3
			-labelArray3 "byte" "short" "float"
			-data1 0 -data2 1 -data3 2
			-columnWidth4 5 65 65 65
			colorFBRadioCtrl;

		checkBoxGrp
			-label "Alpha" -numberOfCheckBoxes 1 -label1 ""
			alphaFBToggleCtrl;
		radioButtonGrp
			-l "" -numberOfRadioButtons 3
			-labelArray3 "byte" "short" "float"
			-data1 0 -data2 1 -data3 2
			-columnWidth4 5 65 65 65
			alphaFBRadioCtrl;

		checkBoxGrp
			-label "Depth"
			-numberOfCheckBoxes 1 -label1 ""
			depthFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Normals"
			-numberOfCheckBoxes 1 -label1 ""
			normalFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Motion Vectors"
			-numberOfCheckBoxes 1 -label1 ""
			motionFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Coverage"
			-numberOfCheckBoxes 1 -label1 ""
			coverageFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Tag"
			-numberOfCheckBoxes 1 -label1 ""
			tagFBToggleCtrl;
		text -label "";

		checkBoxGrp
			-label "Contour"
			-numberOfCheckBoxes 1 -label1 ""
			contourFBToggleCtrl;
		text -label "";
	setParent ..;

	separator -style "in" -width 490 -height 15;

	attrNavigationControlGrp -label "Volume Shader" volumeShaderCtrl;
	attrNavigationControlGrp -label "Lens Shader" lensShaderCtrl;
	attrNavigationControlGrp -label "Environment Shader"
		environmentShaderCtrl;

	setUITemplate -popTemplate;

	AEmentalrayCameraFlagsReplace(
		$messagePlug,
		$outputShader,
		$volumeShader,
		$lensShader,
		$environmentShader);
}

global proc AEmentalrayCameraFlagsReplace(
	string $messagePlug,
	string $outputShader,
	string $volumeShader,
	string $lensShader,
	string $environmentShader)
{
	string $node;
	string $buffer[];
	tokenize($messagePlug, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";
	
	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $outputShader outputShaderCtrl;
	popupMenu -pmc ("popupItems " + $outputShader + " pop_mr_cam_out") -p outputShaderCtrl pop_mr_cam_out;
	
	scriptJob
		-parent outputShaderCtrl -replacePrevious
		-connectionChange $outputShader
		("AEmentalrayCameraFlagsUpdate " + $node);

	connectControl -index 2 colorFBToggleCtrl
		($node + ".miFbComputeColor");
	checkBoxGrp
		-edit -changeCommand ("AEmentalrayCameraFlagsUpdate " + $node)
		colorFBToggleCtrl;

	connectControl colorFBRadioCtrl
		($node + ".miFbBitsizeColor");

	connectControl -index 2 alphaFBToggleCtrl
		($node + ".miFbComputeAlpha");
	checkBoxGrp
		-edit -changeCommand ("AEmentalrayCameraFlagsUpdate " + $node)
		alphaFBToggleCtrl;

	connectControl alphaFBRadioCtrl
		($node + ".miFbBitsizeAlpha");

	connectControl -index 2 depthFBToggleCtrl
		($node + ".miFbComputeDepth");
	connectControl -index 2 normalFBToggleCtrl
		($node + ".miFbComputeNormal");
	connectControl -index 2 motionFBToggleCtrl
		($node + ".miFbComputeMotion");
	connectControl -index 2 coverageFBToggleCtrl
		($node + ".miFbComputeCoverage");
	connectControl -index 2 tagFBToggleCtrl
		($node + ".miFbComputeTag");
	connectControl -index 2 contourFBToggleCtrl
		($node + ".miFbComputeContour");

	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $volumeShader volumeShaderCtrl;
	popupMenu -pmc ("popupItems " + $volumeShader + " pop_mr_cam_vol") -p volumeShaderCtrl pop_mr_cam_vol;
	attrNavigationControlGrp
		-edit -dgc drag_ya -dpc drop_ya -attribute $lensShader lensShaderCtrl;
	popupMenu -pmc ("popupItems " + $lensShader + " pop_mr_cam_len") -p lensShaderCtrl pop_mr_cam_len;
	attrNavigationControlGrp
		-edit  -dgc drag_ya -dpc drop_ya -attribute $environmentShader environmentShaderCtrl;
	popupMenu -pmc ("popupItems " + $environmentShader + " pop_mr_cam_env") -p environmentShaderCtrl pop_mr_cam_env;

	AEmentalrayCameraFlagsUpdate($node);
}

global proc AEmentalrayCamera(string $node)
{
	if (`pluginInfo -q -loaded Mayatomr`) {
		editorTemplate -beginLayout "mental ray" -collapse true;
			editorTemplate -callCustom
				"AEmentalrayCameraFlagsNew"
				"AEmentalrayCameraFlagsReplace"
					 "message"
					 "miOutputShader"
					 "miVolumeShader"
					 "miLensShader"
					 "miEnvironmentShader";
		editorTemplate -endLayout;

		editorTemplate -suppress "miOutputShader";
		editorTemplate -suppress "miFbComputeColor";
		editorTemplate -suppress "miFbBitsizeColor";
		editorTemplate -suppress "miFbComputeAlpha";
		editorTemplate -suppress "miFbBitsizeAlpha";
		editorTemplate -suppress "miFbComputeDepth";
		editorTemplate -suppress "miFbComputeNormal";
		editorTemplate -suppress "miFbComputeMotion";
		editorTemplate -suppress "miFbComputeCoverage";
		editorTemplate -suppress "miFbComputeTag";
		editorTemplate -suppress "miFbComputeContour";
		editorTemplate -suppress "miVolumeShader";
		editorTemplate -suppress "miLensShader";
		editorTemplate -suppress "miEnvironmentShader";
		editorTemplate -suppress "miOutputShaderList";
		editorTemplate -suppress "miLensShaderList";
		editorTemplate -suppress "mentalRayControls";
		}
}
